#!/bin/bash -e

tool_name="PACKAGE_NAME"
tool_version="PACKAGE_VERSION"
video_module='v4l2loopback'
gopro_video_device_number="42"
gopro_video_device="/dev/video${gopro_video_device_number}"
threads="$((($(nproc) + 2) / 3))"

declare -A commands
commands=( \
  ["vc-low"]=".480p device"
  ["vc-high"]=".1080p device" #narrow
  ["start"]="-gp/gpWebcam/START"
  ["1080p"]="-gp/gpWebcam/START?res=1080"
  ["720p"]="-gp/gpWebcam/START?res=720"
  ["480p"]="-gp/gpWebcam/START?res=480"
  ["stop"]="-gp/gpWebcam/STOP"
  ["wide"]="-gp/gpWebcam/SETTINGS?fov=0"
  ["linear"]="-gp/gpWebcam/SETTINGS?fov=4"
  ["narrow"]="-gp/gpWebcam/SETTINGS?fov=6"
  ["preview"]="_command_preview"
  ["device"]="=command_device"
  ["device-cleanup"]="=command_remove_module"
  ["troubleshoot"]="=print_troubleshooting"
)

declare -A help
help=( \
  ["start"]="start webcam mode with default resolution"
  ["1080p"]="start webcam mode with 1080p resolution"
  ["720p"]="start webcam mode with 720p resolution"
  ["480p"]="start webcam mode with 480p resolution"
  ["stop"]="stop webcam mode"
  ["wide"]="switch to wide field of view"
  ["linear"]="switch to linear field of view"
  ["narrow"]="switch to narrow field of view"
  ["preview"]="preview webcam in VLC (requires webcam mode to be previously started)"
  ["device"]="create v4l2 gopro device under ${gopro_video_device} with ffmpeg (requires webcam mode to be previously started)"
  ["device-cleanup"]="removes the v4l2 gopro device module"
  ["vc-low"]="a combination of commands '480p' and 'narrow'"
  ["vc-high"]="a combination of commands '1080p' and 'narrow'"
  ["troubleshoot"]="=print troubleshooting information"
)

print_help() {
cat <<EOF
${tool_name} ${tool_version}

usage: ${tool_name} [options...] commands...

options:
  --threads=N: use N threads (default is one third of the number of cores rounded up)

commands:
EOF

  for cmd in "${!commands[@]}"; do
    echo "- ${cmd}: ${help["${cmd}"]}"
  done | sort -n

cat <<EOF

example:
  ${tool_name} start device
    - starts webcam mode using default resolution and make it available to
      video conference or other software

  ${tool_name} start linear device
    - starts webcam mode using default resolution and linear FoV, and make it
    available to video conference or other software

  ${tool_name} 480p narrow device
    - starts webcam mode using default resolution and narrow FoV, and make
      it available to video conference or other software

  ${tool_name} 1080p linear preview
    - starts webcam mode using 1080p resolution and wide FoV, launching VLC
      to preview the video feed

  ${tool_name} stop
    - stop webcam mode

auto-detect:
  The tool will attempt auto-detection of the GoPro network endpoint. This
  process might fail if more than one network interface appears to have the
  same characteristics.

  You can explicitly inform the tool of the correct IP address of the GoPro
  by setting the \`GOPRO_IP\` environment variable:
  \`\`\`
  GOPRO_IP=123.456.789.0 gopro-tool commands...
  \`\`\`
  Alternatively, you can inform the tool of the corrent network interface
  name by setting the \`GOPRO_INTERFACE\` environment variable:
  \`\`\`
  GOPRO_INTERFACE=goproiface gopro-tool commands...
  \`\`\`
  Use the command \`ip -4 addr\` to list all available network interfaces.
EOF
}

print_troubleshooting() {
  cat <<EOF
${tool_name} ${tool_version}

TROUBLESHOOTING:
- double check that the camera has been turned on

- double check that the USB cable is properly connected to the camera and computer

- double check that the USB connection mode is GoPro Connect and not MTP under
  Preferences -> Connections -> USB Connection. If that option doesn't exist,
  you likely need a firmware upgrade instructions can be found in the official
  GoPro documentation at \`https://gopro.com/en/us/update\`
EOF

interface_candidates=($(ip -4 --oneline link | grep -v "state DOWN" | grep -v LOOPBACK | grep -v "NO-CARRIER" | cut -f2 -d":"))
if [[ "${#interface_candidates[@]}" -gt 1 ]]; then
  cat <<EOF

- a total of ${#interface_candidates[@]} GoPro network interface candidates have been found. The tool may
  not be able to auto-detect the right one. Consider explicitly picking the GoPro
  IP address or network interface. Check the \`auto-detect\` section of the help
  message by running \`${tool_name}\` without any arguments.

EOF
fi
}

command_preview() {
  vlc -vvv \
    --network-caching=300 \
    --sout-x264-preset=ultrafast \
    --sout-x264-tune=zerolatency \
    --sout-x264-vbv-bufsize 0 \
    --sout-transcode-threads 4 \
    --no-audio "udp://@:8554"
}

command_remove_module() {
  if lsmod | grep "${video_module}" >/dev/null 2>/dev/null; then
    (set -x; sudo modprobe -rf "${video_module}")
    sleep .2
  fi
}

command_device() {
  command_remove_module

  (set -x; \
    sudo modprobe "${video_module}" \
      exclusive_caps=1 \
      card_label='GoproLinux' \
      video_nr="${gopro_video_device_number}" \
  )

  ffmpeg -nostdin \
    -threads "${threads}" \
    -i "udp://@0.0.0.0:8554?overrun_nonfatal=1&fifo_size=50000000" \
    -f:v mpegts \
    -fflags nobuffer \
    -vf format=yuv420p \
    -f v4l2 "${gopro_video_device}"

  command_remove_module
}

[[ "$#" -gt 0 ]] || (print_help; exit 1)

args=()
while [[ "$#" -gt 0 ]]; do
  arg="$1"; shift

  case "${arg}" in
    -j | --threads)
      [[ "$#" -gt 0 ]] || (echo "ERROR: missing number of threads after '${arg}'"; exit 1)
      threads="${1}"; shift
      ;;

    -j[0-9]*)
      threads="${arg:2}"
      ;;

    -threads=*)
      threads="${arg#*=}"
      ;;

    *)
      if [[ -v "commands[\"${arg}\"]" ]]; then
        args+=("${arg}")
      else
        echo "ERROR: unknown command: '${arg}' - remaining args: $*"
        exit 1
      fi
      ;;
  esac
done

gopro_ip="${GOPRO_IP}"
if [[ -z "${gopro_ip}" ]]; then
  gopro_interface="${GOPRO_INTERFACE}"
  if [[ -z "${gopro_interface}" ]]; then
    gopro_interface="$(ip -4 --oneline link | grep -v "state DOWN" | grep -v LOOPBACK | grep -v "NO-CARRIER" | cut -f2 -d":" | tail -1 | xargs)"
  fi
  if [[ -z "${gopro_interface}" ]]; then
    echo "ERROR: can't find gopro device"
    echo
    print_troubleshooting
    exit 1
  fi

  gopro_ip="$(ip -4 addr show dev "${gopro_interface}" | grep -Po '(?<=inet )[\d.]+' | awk -F"." '{print $1"."$2"."$3".51"}')"
  if [[ -z "${gopro_ip}" ]]; then
    echo "ERROR: can't find gopro ip"
    echo
    print_troubleshooting
    exit 1
  fi
fi

cat <<EOF
gopro device: ${gopro_interface}
gopro ip: ${gopro_ip}

EOF

make_request() {
  cmd="$1"; shift
  url="http://${gopro_ip}/$*"

  [[ -n "$*" ]] || (echo "ERROR: missing url for command '${cmd}'"; exit 1)

  echo -n "command '${cmd}': ${url} ..."
  response="$(curl -sf "${url}")"
  reponse_code="$?"
  [[ "${reponse_code}" -eq 0 ]] || (echo "ERROR: request failed: ${response_code}"; exit 1)
  [[ -n "${response}" ]] || (echo "ERROR: empty response"; exit 1)
  response_error="$(echo "${response}" | jq '.error')"
  [[ "${response_error}" == 0 ]] || (echo "ERROR: response error: ${response_error}"; exit 1)

  echo " succeeded"
}

run_command() {
  cmd="$1"
  value="${commands["${cmd}"]}"
  prefix="${value:0:1}"
  suffix="${value:1}"

  case "${prefix}" in
    .)
      for sub_cmd in ${suffix}; do
        run_command "${sub_cmd}"
      done
      ;;

    -)
      make_request "${cmd}" "${suffix}"
      ;;

    =)
      ${suffix}
      ;;

    _)
      ${suffix} 2> /dev/null
      ;;
  esac
}

for cmd in "${args[@]}"; do
  run_command "${cmd}"
done
